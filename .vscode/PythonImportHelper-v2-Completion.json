[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_moons",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_circles",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_moons",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_circles",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_circles",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_circles",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_moons",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_wine",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_breast_cancer",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_circles",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "fetch_openml",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_circles",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_circles",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_moons",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "fetch_openml",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "GaussianMixture",
        "importPath": "sklearn.mixture",
        "description": "sklearn.mixture",
        "isExtraImport": true,
        "detail": "sklearn.mixture",
        "documentation": {}
    },
    {
        "label": "GaussianMixture",
        "importPath": "sklearn.mixture",
        "description": "sklearn.mixture",
        "isExtraImport": true,
        "detail": "sklearn.mixture",
        "documentation": {}
    },
    {
        "label": "GaussianMixture",
        "importPath": "sklearn.mixture",
        "description": "sklearn.mixture",
        "isExtraImport": true,
        "detail": "sklearn.mixture",
        "documentation": {}
    },
    {
        "label": "GaussianMixture",
        "importPath": "sklearn.mixture",
        "description": "sklearn.mixture",
        "isExtraImport": true,
        "detail": "sklearn.mixture",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "kdtree",
        "description": "kdtree",
        "isExtraImport": true,
        "detail": "kdtree",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "kdtree",
        "description": "kdtree",
        "isExtraImport": true,
        "detail": "kdtree",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "kdtree",
        "description": "kdtree",
        "isExtraImport": true,
        "detail": "kdtree",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "kdtree",
        "description": "kdtree",
        "isExtraImport": true,
        "detail": "kdtree",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "kdtree",
        "description": "kdtree",
        "isExtraImport": true,
        "detail": "kdtree",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "datasets",
        "description": "datasets",
        "isExtraImport": true,
        "detail": "datasets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "kmist",
        "description": "kmist",
        "isExtraImport": true,
        "detail": "kmist",
        "documentation": {}
    },
    {
        "label": "graphviz_layout",
        "importPath": "networkx.drawing.nx_agraph",
        "description": "networkx.drawing.nx_agraph",
        "isExtraImport": true,
        "detail": "networkx.drawing.nx_agraph",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "minimum_spanning_tree",
        "importPath": "scipy.sparse.csgraph",
        "description": "scipy.sparse.csgraph",
        "isExtraImport": true,
        "detail": "scipy.sparse.csgraph",
        "documentation": {}
    },
    {
        "label": "pdist",
        "importPath": "scipy.spatial.distance",
        "description": "scipy.spatial.distance",
        "isExtraImport": true,
        "detail": "scipy.spatial.distance",
        "documentation": {}
    },
    {
        "label": "squareform",
        "importPath": "scipy.spatial.distance",
        "description": "scipy.spatial.distance",
        "isExtraImport": true,
        "detail": "scipy.spatial.distance",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "generate_dataset",
        "kind": 2,
        "importPath": "datasets",
        "description": "datasets",
        "peekOfCode": "def generate_dataset(\n    dataset_type=\"circles\",\n    savefile=\"data.json\",\n    points_count=100,\n    noise=0.1,\n    no_centres=3,\n    to_plot=True,\n):\n    if dataset_type == \"circles\":\n        X, y = make_circles(",
        "detail": "datasets",
        "documentation": {}
    },
    {
        "label": "KDNode",
        "kind": 6,
        "importPath": "kdtree",
        "description": "kdtree",
        "peekOfCode": "class KDNode:\n    def __init__(self, point, axis, left=None, right=None):\n        self.point = point\n        self.axis = axis\n        self.left = left\n        self.right = right\nclass KDTree:\n    def __init__(self):\n        self.root = None\n    def build(self, points, depth=0):",
        "detail": "kdtree",
        "documentation": {}
    },
    {
        "label": "KDTree",
        "kind": 6,
        "importPath": "kdtree",
        "description": "kdtree",
        "peekOfCode": "class KDTree:\n    def __init__(self):\n        self.root = None\n    def build(self, points, depth=0):\n        if not points:\n            return None\n        k = len(points[0])  # Dimensionality of the data\n        axis = depth % k\n        # Sort points by the current axis and choose the median as the pivot\n        points.sort(key=lambda x: x[axis])",
        "detail": "kdtree",
        "documentation": {}
    },
    {
        "label": "i_neighbors",
        "kind": 2,
        "importPath": "kdtree",
        "description": "kdtree",
        "peekOfCode": "def i_neighbors(tree, query_point, i):\n    \"\"\"Find the ith nearest neighbor of the given point using a set to track visited nodes.\"\"\"\n    if tree.root is None:\n        return None\n    i += 1\n    # Priority queue to maintain i nearest neighbors\n    neighbors = []\n    # Set to track visited nodes\n    visited = set()\n    def _search(node):",
        "detail": "kdtree",
        "documentation": {}
    },
    {
        "label": "MST",
        "kind": 6,
        "importPath": "kmist",
        "description": "kmist",
        "peekOfCode": "class MST:\n    def __init__(self, points):\n        \"\"\"\n        Initialize the MST with a set of points.\n        Parameters:\n        points (list): List of points to build the KD-Tree and graph.\n        \"\"\"\n        self.points = points\n        self.points_count = len(points)\n    def build(self):",
        "detail": "kmist",
        "documentation": {}
    },
    {
        "label": "savefile",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "savefile = \"data.json\"\npoints_count = 30000\nto_plot = False\nno_centres = 1\nfrom sklearn.datasets import make_circles\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import fetch_openml\n# Initialize the parameters\nnoise = 0.05  # Amount of noise\npoints_range = [10, 100, 1000, 10000, 50000, 100000]",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "points_count",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "points_count = 30000\nto_plot = False\nno_centres = 1\nfrom sklearn.datasets import make_circles\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import fetch_openml\n# Initialize the parameters\nnoise = 0.05  # Amount of noise\npoints_range = [10, 100, 1000, 10000, 50000, 100000]\ncenters_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "to_plot",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "to_plot = False\nno_centres = 1\nfrom sklearn.datasets import make_circles\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import fetch_openml\n# Initialize the parameters\nnoise = 0.05  # Amount of noise\npoints_range = [10, 100, 1000, 10000, 50000, 100000]\ncenters_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nresults = []",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "no_centres",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "no_centres = 1\nfrom sklearn.datasets import make_circles\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import fetch_openml\n# Initialize the parameters\nnoise = 0.05  # Amount of noise\npoints_range = [10, 100, 1000, 10000, 50000, 100000]\ncenters_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nresults = []\ndataset_types = [\"blobs\", \"circles\", \"moons\", \"iris\", \"wine\", \"breast_cancer\"]",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "noise",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "noise = 0.05  # Amount of noise\npoints_range = [10, 100, 1000, 10000, 50000, 100000]\ncenters_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nresults = []\ndataset_types = [\"blobs\", \"circles\", \"moons\", \"iris\", \"wine\", \"breast_cancer\"]\ndataset_types = [\n    \"mnist\",\n    \"fashion_mnist\",\n    \"covertype\",\n    \"poker\",",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "points_range",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "points_range = [10, 100, 1000, 10000, 50000, 100000]\ncenters_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nresults = []\ndataset_types = [\"blobs\", \"circles\", \"moons\", \"iris\", \"wine\", \"breast_cancer\"]\ndataset_types = [\n    \"mnist\",\n    \"fashion_mnist\",\n    \"covertype\",\n    \"poker\",\n    \"emnist\",",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "centers_range",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "centers_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nresults = []\ndataset_types = [\"blobs\", \"circles\", \"moons\", \"iris\", \"wine\", \"breast_cancer\"]\ndataset_types = [\n    \"mnist\",\n    \"fashion_mnist\",\n    \"covertype\",\n    \"poker\",\n    \"emnist\",\n    \"blobs\",",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "results = []\ndataset_types = [\"blobs\", \"circles\", \"moons\", \"iris\", \"wine\", \"breast_cancer\"]\ndataset_types = [\n    \"mnist\",\n    \"fashion_mnist\",\n    \"covertype\",\n    \"poker\",\n    \"emnist\",\n    \"blobs\",\n    \"circles\",",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "dataset_types",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "dataset_types = [\"blobs\", \"circles\", \"moons\", \"iris\", \"wine\", \"breast_cancer\"]\ndataset_types = [\n    \"mnist\",\n    \"fashion_mnist\",\n    \"covertype\",\n    \"poker\",\n    \"emnist\",\n    \"blobs\",\n    \"circles\",\n    \"moons\",",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "dataset_types",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "dataset_types = [\n    \"mnist\",\n    \"fashion_mnist\",\n    \"covertype\",\n    \"poker\",\n    \"emnist\",\n    \"blobs\",\n    \"circles\",\n    \"moons\",\n]",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "real_dataset_types",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "real_dataset_types = [\"mnist\", \"fashion_mnist\", \"covertype\", \"poker\", \"emnist\"]\npoints_range = [10, 100, 1000, 10000, 50000, 100000]\ncenters_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nfor _ in range(1):\n    for _ in range(1):\n        for dataset_type in dataset_types:\n            if dataset_type in real_dataset_types:\n                if dataset_type == \"mnist\":\n                    mnist = fetch_openml(\"mnist_784\", version=1)\n                    X = mnist.data[:10000]  # Use the entire dataset (70,000 samples)",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "points_range",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "points_range = [10, 100, 1000, 10000, 50000, 100000]\ncenters_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nfor _ in range(1):\n    for _ in range(1):\n        for dataset_type in dataset_types:\n            if dataset_type in real_dataset_types:\n                if dataset_type == \"mnist\":\n                    mnist = fetch_openml(\"mnist_784\", version=1)\n                    X = mnist.data[:10000]  # Use the entire dataset (70,000 samples)\n                    if X.shape[1] > 2:",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "centers_range",
        "kind": 5,
        "importPath": "m copy",
        "description": "m copy",
        "peekOfCode": "centers_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nfor _ in range(1):\n    for _ in range(1):\n        for dataset_type in dataset_types:\n            if dataset_type in real_dataset_types:\n                if dataset_type == \"mnist\":\n                    mnist = fetch_openml(\"mnist_784\", version=1)\n                    X = mnist.data[:10000]  # Use the entire dataset (70,000 samples)\n                    if X.shape[1] > 2:\n                        pca = PCA(n_components=2)",
        "detail": "m copy",
        "documentation": {}
    },
    {
        "label": "savefile",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "savefile = \"data.json\"\npoints_count = 3000\nto_plot = False\nno_centres = 1\n# In[88]:\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\n# Initialize the parameters\nfrom sklearn.datasets import make_circles\nimport matplotlib.pyplot as plt",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "points_count",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "points_count = 3000\nto_plot = False\nno_centres = 1\n# In[88]:\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\n# Initialize the parameters\nfrom sklearn.datasets import make_circles\nimport matplotlib.pyplot as plt\n# Initialize the parameters",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "to_plot",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "to_plot = False\nno_centres = 1\n# In[88]:\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\n# Initialize the parameters\nfrom sklearn.datasets import make_circles\nimport matplotlib.pyplot as plt\n# Initialize the parameters\nnoise = 0.05  # Amount of noise",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "no_centres",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "no_centres = 1\n# In[88]:\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\n# Initialize the parameters\nfrom sklearn.datasets import make_circles\nimport matplotlib.pyplot as plt\n# Initialize the parameters\nnoise = 0.05  # Amount of noise\n# Generate the data",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "noise",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "noise = 0.05  # Amount of noise\n# Generate the data\nX, y = make_circles(n_samples=points_count, noise=noise, factor=0.5, random_state=42)\n# Convert the data to a list of tuples\npoints = [(x, y) for x, y in X]\n# points = [(round(x , 1), round(y , 1)) for x, y in X]\nmaxdis = math.ceil(math.log2(points_count))\n# In[89]:\nX, Y = make_blobs(n_samples=points_count, centers=no_centres, random_state=42)\npoints = [(x, y) for x, y in X]",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "points",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "points = [(x, y) for x, y in X]\n# points = [(round(x , 1), round(y , 1)) for x, y in X]\nmaxdis = math.ceil(math.log2(points_count))\n# In[89]:\nX, Y = make_blobs(n_samples=points_count, centers=no_centres, random_state=42)\npoints = [(x, y) for x, y in X]\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np\nfrom sklearn.datasets import make_blobs, make_circles, make_moons",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "maxdis",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "maxdis = math.ceil(math.log2(points_count))\n# In[89]:\nX, Y = make_blobs(n_samples=points_count, centers=no_centres, random_state=42)\npoints = [(x, y) for x, y in X]\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np\nfrom sklearn.datasets import make_blobs, make_circles, make_moons\nimport random\nimport json",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "points",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "points = [(x, y) for x, y in X]\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np\nfrom sklearn.datasets import make_blobs, make_circles, make_moons\nimport random\nimport json\nimport time\nfrom tabulate import tabulate\nfrom sklearn.datasets import load_iris, fetch_openml",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "savefile",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "savefile = \"data.json\"\nto_plot = False\ndataset_types = [\n    \"mnist\",\n    \"fashion_mnist\",\n    \"covertype\",\n    \"poker\",\n    \"emnist\",\n    \"blobs\",\n    \"circles\",",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "to_plot",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "to_plot = False\ndataset_types = [\n    \"mnist\",\n    \"fashion_mnist\",\n    \"covertype\",\n    \"poker\",\n    \"emnist\",\n    \"blobs\",\n    \"circles\",\n    \"moons\",",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "dataset_types",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "dataset_types = [\n    \"mnist\",\n    \"fashion_mnist\",\n    \"covertype\",\n    \"poker\",\n    \"emnist\",\n    \"blobs\",\n    \"circles\",\n    \"moons\",\n]",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "real_dataset_types",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "real_dataset_types = [\"mnist\", \"fashion_mnist\", \"covertype\", \"poker\", \"emnist\"]\npoints_range = [10, 100, 1000, 10000, 50000, 100000]\ncenters_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nfor _ in range(1):\n    for dataset_type in dataset_types:\n        if dataset_type in real_dataset_types:\n            if dataset_type == \"mnist\":\n                mnist = fetch_openml(\"mnist_784\", version=1)\n                X = mnist.data[:10000]  # Use the entire dataset (70,000 samples)\n                if X.shape[1] > 2:",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "points_range",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "points_range = [10, 100, 1000, 10000, 50000, 100000]\ncenters_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nfor _ in range(1):\n    for dataset_type in dataset_types:\n        if dataset_type in real_dataset_types:\n            if dataset_type == \"mnist\":\n                mnist = fetch_openml(\"mnist_784\", version=1)\n                X = mnist.data[:10000]  # Use the entire dataset (70,000 samples)\n                if X.shape[1] > 2:\n                    pca = PCA(n_components=2)",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "centers_range",
        "kind": 5,
        "importPath": "m",
        "description": "m",
        "peekOfCode": "centers_range = [1, 10, 100, 1000, 5000, 10000, 50000, 100000]\nfor _ in range(1):\n    for dataset_type in dataset_types:\n        if dataset_type in real_dataset_types:\n            if dataset_type == \"mnist\":\n                mnist = fetch_openml(\"mnist_784\", version=1)\n                X = mnist.data[:10000]  # Use the entire dataset (70,000 samples)\n                if X.shape[1] > 2:\n                    pca = PCA(n_components=2)\n                    X = pca.fit_transform(X)",
        "detail": "m",
        "documentation": {}
    },
    {
        "label": "euclidean_distance",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def euclidean_distance(coord1, coord2):\n    dis = math.sqrt((coord1[0] - coord2[0]) ** 2 + (coord1[1] - coord2[1]) ** 2)\n    return dis\ndef count_connected_components(graph):\n    return len(list(nx.connected_components(graph)))\ndef cusrandis(k, maxdis):\n    windowsize = max(maxdis - k + 1, 1)\n    lpp = np.random.laplace(0, windowsize**0.1)\n    lpp = int(k + (abs(lpp)) % windowsize)\n    return lpp",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "count_connected_components",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def count_connected_components(graph):\n    return len(list(nx.connected_components(graph)))\ndef cusrandis(k, maxdis):\n    windowsize = max(maxdis - k + 1, 1)\n    lpp = np.random.laplace(0, windowsize**0.1)\n    lpp = int(k + (abs(lpp)) % windowsize)\n    return lpp\n# def graphify(graph , to_plot):\n#     # pos = {i: coord for coord, i in cordmap.items()}\n#     if not to_plot :",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "cusrandis",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def cusrandis(k, maxdis):\n    windowsize = max(maxdis - k + 1, 1)\n    lpp = np.random.laplace(0, windowsize**0.1)\n    lpp = int(k + (abs(lpp)) % windowsize)\n    return lpp\n# def graphify(graph , to_plot):\n#     # pos = {i: coord for coord, i in cordmap.items()}\n#     if not to_plot :\n#         return\n#     pos = nx.get_node_attributes(graph, \"pos\")",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "graphify",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def graphify(graph, to_plot, bottom_text=\"\"):\n    if not to_plot:\n        return\n    pos = nx.get_node_attributes(graph, \"pos\")\n    # Find all connected components\n    connected_components = list(nx.connected_components(graph))\n    # Define a color cycle\n    colors = itertools.cycle(plt.cm.tab20.colors)\n    # Create a color map for each node\n    color_map = {}",
        "detail": "utils",
        "documentation": {}
    }
]